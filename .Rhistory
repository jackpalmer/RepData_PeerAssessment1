install.packages("swirl")
library("swirl")
swirl(
)
package(swirl)
packages(swirl)
library("swirl")
swirl()
a <- available.packages()
head.rownames(a(3))
head(rownames(a,3))
head(rownames(a),3)
install.packages("slidify")
package.install("devtools")
install.packages("devtools")
library(devtools)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
Generate data from a Normal linear model
Generate random exponentially distributed data
Generate data from a Poisson generalized linear model
Generate uniformly distributed random data
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
#Question 1
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "068ff5dda8a7e15c8418",
secret = "621b8eecb3257b3961311e86a473d1ccb48aba03")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("httpuv")
#Question 1
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "068ff5dda8a7e15c8418",
secret = "621b8eecb3257b3961311e86a473d1ccb48aba03")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
#Question 1
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "068ff5dda8a7e15c8418",
secret = "621b8eecb3257b3961311e86a473d1ccb48aba03")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",temp)
data <- read.csv(unz(temp, "activity.csv"))
unlink(temp)
data$date <- as.Date(data$date)
steps_by_day <- aggregate(data, steps ~ date, sum)
steps_by_day <- aggregate(data$steps, by = list(data$date), sum)
View(steps_by_day)
g <- ggplot(data=steps_by_day, aes(x=x))
g + geom_histogram()
library("ggplot2", lib.loc="~/R/win-library/3.1")
m <- ggplot(data=steps_by_day, aes(x=x))
m + geom_histogram()
m <- ggplot(data=steps_by_day, aes(x=x))
m + geom_histogram(binwidth = 1000)
libary(ggplot2)
library(ggplot2)
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",temp)
data <- read.csv(unz(temp, "activity.csv"))
unlink(temp)
data$date <- as.Date(data$date)
m <- ggplot(data=steps_by_day, aes(x=x))
m + geom_histogram(binwidth = 1000)
m <- ggplot(data=steps_by_day, aes(x=x))
m + geom_histogram(binwidth = 1000)
steps_by_day <- aggregate(data$steps, by = list(data$date), sum)
m <- ggplot(data=steps_by_day, aes(x=x))
m + geom_histogram(binwidth = 1000)
mean_steps_by_day <- mean(steps_by_day$x)
median_steps_by_day <- median(steps_by_day$x)
View(steps_by_day)
View(data)
View(steps_by_day)
steps_by_day <- aggregate(data$steps, by = list(data$date), sum)
steps_by_day[is.na(steps_by_day)] <- 0
mean_steps_by_day <- mean(steps_by_day$x)
median_steps_by_day <- median(steps_by_day$x)
m <- ggplot(data=steps_by_day, aes(x=x))
m + geom_histogram(binwidth = 1000)
mean_steps_by_day <- mean(steps_by_day$x, na.rm = T)
median_steps_by_day <- median(steps_by_day$x, na.rm = T)
m <- ggplot(data=steps_by_day, aes(x=x))
m + geom_histogram(binwidth = 1000)
mean_steps_by_day <- mean(steps_by_day$x, na.rm = T)
median_steps_by_day <- median(steps_by_day$x, na.rm = T)
steps_by_day <- aggregate(data$steps, by = list(data$date), sum)
#steps_by_day[is.na(steps_by_day)] <- 0
m <- ggplot(data=steps_by_day, aes(x=x))
m + geom_histogram(binwidth = 1000)
mean_steps_by_day <- mean(steps_by_day$x, na.rm = T)
median_steps_by_day <- median(steps_by_day$x, na.rm = T)
missing_values <- sum(is.na(data$steps))
mean_steps_by_interval <- aggregate(data$steps, by = list(data$interval), mean)
View(mean_steps_by_interval)
mean_steps_by_interval <- aggregate(data$steps, by = list(data$interval), mean, na.rm = T)
weekday(data$date)
weekdays(data$date)
?weekdays
ifelse(weekdays(data$date) == "Saturday" | "Sunday", "Weekend", "Weekday")
ifelse(weekdays(data$date) == "Saturday" | weekdays(data$date) == "Sunday", "Weekend", "Weekday")
data$dow <- ifelse(weekdays(data$date) == "Saturday" | weekdays(data$date) == "Sunday", "Weekend", "Weekday")
View(data)
steps_by_day <- aggregate(data$steps, by = list(data$date), sum)
colnames(steps_by_day) <- c("date","steps")
m <- ggplot(data=steps_by_day, aes(x=steps))
m + geom_histogram(binwidth = 1000)
plot(data$steps,data$date)
plot(data$interval,data$steps)
plot(data$interval,data$steps, type = l)
plot(data$interval,data$steps, type="l", xlab= "Time Interval", ylab= "Average Number of Steps Taken")
plot(data$interval,mean(data$steps), type="l", xlab= "Time Interval", ylab= "Average Number of Steps Taken")
mean_steps_by_interval <- aggregate(data$steps, by = list(data$interval), mean, na.rm = T)
colnames(mean_steps_by_interval) <- c("interval","steps")
plot(mean_steps_by_interval$interval,mean_steps_by_interval$steps, type="l", xlab= "Time Interval", ylab= "Average Number of Steps Taken")
m <- ggplot(data=steps_by_day, aes(x=steps))
m + geom_histogram(binwidth = 1000)
m <- ggplot(data=steps_by_day, aes(x=steps))
m + geom_histogram(binwidth = 1000) + xlab("Steps")
m <- ggplot(data=steps_by_day, aes(x=steps))
m + geom_histogram(binwidth = 1000) + xlab("Steps") + ylab("Frequency")
mean_steps_by_interval <- aggregate(data$steps, by = list(data$interval), mean, na.rm = T)
colnames(mean_steps_by_interval) <- c("interval","steps")
plot(mean_steps_by_interval$interval,mean_steps_by_interval$steps, type="l", xlab= "Time Interval", ylab= "Average Number of Steps Taken")
View(mean_steps_by_interval)
mean_steps_by_interval <- mean_steps_by_interval[order(mean_steps_by_interval$steps), ]
mean_steps_by_interval <- mean_steps_by_interval[order(-mean_steps_by_interval$steps), ]
View(mean_steps_by_interval)
top_interval <- mean_steps_by_interval$interval[1]
ifelse(is.na(data$steps),"Yes","No")
data_cleaned <- merge(data,mean_steps_by_interval,by.x = c("interval"),by.y = c"interval",all.x = T)
ifelse(is.na(data$steps),"Yes","No")
data_cleaned <- merge(data,mean_steps_by_interval,by.x = c("interval"),by.y = c("interval"),all.x = T)
#ifelse(is.na(data$steps),"Yes","No")
View(data_cleaned)
data_cleaned <- merge(data,mean_steps_by_interval,by.x = c("interval"),by.y = c("interval"),all.x = T)
data_cleaned$steps <- ifelse(is.na(data$steps),data_cleaned$steps.x,data_cleaned$steps.y)
View(data_cleaned)
data_cleaned <- merge(data,mean_steps_by_interval,by.x = c("interval"),by.y = c("interval"),all.x = T)
data_cleaned$steps <- ifelse(is.na(data$steps.x),data_cleaned$steps.x,data_cleaned$steps.y)
data_cleaned <- merge(data,mean_steps_by_interval,by.x = c("interval"),by.y = c("interval"),all.x = T)
data_cleaned$steps <- ifelse(is.na(data_cleaned$steps.x),data_cleaned$steps.x,data_cleaned$steps.y)
View(data_cleaned)
data_cleaned <- merge(data,mean_steps_by_interval,by.x = c("interval"),by.y = c("interval"),all.x = T)
data_cleaned$steps <- ifelse(!is.na(data_cleaned$steps.x),data_cleaned$steps.x,data_cleaned$steps.y)
steps_by_day_cleaned <- aggregate(data_cleaned$steps, by = list(data_cleaned$date), sum)
colnames(steps_by_day_cleaned) <- c("date","steps")
m <- ggplot(data=steps_by_day_cleaned, aes(x=steps))
m + geom_histogram(binwidth = 1000) + xlab("Steps") + ylab("Frequency")
steps_by_day_cleaned <- aggregate(data_cleaned$steps, by = list(data_cleaned$date), sum)
colnames(steps_by_day_cleaned) <- c("date","steps")
m <- ggplot(data=steps_by_day_cleaned, aes(x=steps))
m + geom_histogram(binwidth = 1000) + xlab("Steps") + ylab("Frequency")
mean_steps_by_day_cleaned <- mean(steps_by_day_cleaned$x, na.rm = T)
mean_steps_by_day_cleaned <- median(steps_by_day_cleaned$x, na.rm = T)
mean_steps_by_day_cleaned <- mean(steps_by_day_cleaned$steps, na.rm = T)
mean_steps_by_day_cleaned <- median(steps_by_day_cleaned$steps, na.rm = T)
mean_steps_by_day_cleaned <- mean(steps_by_day_cleaned$steps, na.rm = T)
median_steps_by_day_cleaned <- median(steps_by_day_cleaned$steps, na.rm = T)
setwd("~/GitHub/RepData_PeerAssessment1")
library("git2r", lib.loc="~/R/win-library/3.1")
# Chunk 1
library(ggplot2)
# Chunk 2: load data
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",temp)
data <- read.csv(unz(temp, "activity.csv"))
unlink(temp)
data$date <- as.Date(data$date)
# Chunk 3
steps_by_day <- aggregate(data$steps, by = list(data$date), sum)
colnames(steps_by_day) <- c("date","steps")
# Chunk 4
m <- ggplot(data=steps_by_day, aes(x=steps))
m + geom_histogram(binwidth = 1000) + xlab("Steps") + ylab("Frequency")
# Chunk 5
mean_steps_by_day <- mean(steps_by_day$x, na.rm = T)
median_steps_by_day <- median(steps_by_day$x, na.rm = T)
# Chunk 6
mean_steps_by_interval <- aggregate(data$steps, by = list(data$interval), mean, na.rm = T)
colnames(mean_steps_by_interval) <- c("interval","steps")
plot(mean_steps_by_interval$interval,mean_steps_by_interval$steps, type="l", xlab= "Time Interval", ylab= "Average Number of Steps Taken")
# Chunk 7
mean_steps_by_interval <- mean_steps_by_interval[order(-mean_steps_by_interval$steps), ]
top_interval <- mean_steps_by_interval$interval[1]
# Chunk 8
missing_values <- sum(is.na(data$steps))
# Chunk 9
data_cleaned <- merge(data,mean_steps_by_interval,by.x = c("interval"),by.y = c("interval"),all.x = T)
data_cleaned$steps <- ifelse(!is.na(data_cleaned$steps.x),data_cleaned$steps.x,data_cleaned$steps.y)
# Chunk 10
steps_by_day_cleaned <- aggregate(data_cleaned$steps, by = list(data_cleaned$date), sum)
colnames(steps_by_day_cleaned) <- c("date","steps")
# Chunk 11
m <- ggplot(data=steps_by_day_cleaned, aes(x=steps))
m + geom_histogram(binwidth = 1000) + xlab("Steps") + ylab("Frequency")
# Chunk 12
mean_steps_by_day_cleaned <- mean(steps_by_day_cleaned$steps, na.rm = T)
median_steps_by_day_cleaned <- median(steps_by_day_cleaned$steps, na.rm = T)
# Chunk 13
data$dow <- ifelse(weekdays(data$date) == "Saturday" | weekdays(data$date) == "Sunday", "Weekend", "Weekday")
# Chunk 14
data_weekday <- subset(data, dow == "Weekday")
data_weekday <- subset(data, dow == "Weekday")
data_weekend <- subset(data, dow == "Weekend")
mean_steps_by_interval_weekday <- aggregate(data_weekday$steps, by = list(data_weekday$interval), mean, na.rm = T)
mean_steps_by_interval_weekend <- aggregate(data_weekend$steps, by = list(data_weekend$interval), mean, na.rm = T)
colnames(mean_steps_by_interval_weekday) <- c("interval","steps")
colnames(mean_steps_by_interval_weekend) <- c("interval","steps")
par(mfrow=c(2,1))
plot(mean_steps_by_interval_weekday$interval,mean_steps_by_interval_weekday$steps, type="l", xlab= "Time Interval", ylab= "Average Number of Steps Taken")
plot(mean_steps_by_interval_weekend$interval,mean_steps_by_interval_weekend$steps, type="l", xlab= "Time Interval", ylab= "Average Number of Steps Taken")
data_weekday <- subset(data, dow == "Weekday")
data_weekend <- subset(data, dow == "Weekend")
mean_steps_by_interval_weekday <- aggregate(data_weekday$steps, by = list(data_weekday$interval), mean, na.rm = T)
mean_steps_by_interval_weekend <- aggregate(data_weekend$steps, by = list(data_weekend$interval), mean, na.rm = T)
colnames(mean_steps_by_interval_weekday) <- c("interval","steps")
colnames(mean_steps_by_interval_weekend) <- c("interval","steps")
par(mfrow=c(2,2))
plot(mean_steps_by_interval_weekday$interval,mean_steps_by_interval_weekday$steps, type="l", xlab= "Time Interval", ylab= "Average Number of Steps Taken")
plot(mean_steps_by_interval_weekend$interval,mean_steps_by_interval_weekend$steps, type="l", xlab= "Time Interval", ylab= "Average Number of Steps Taken")
data_weekday <- subset(data, dow == "Weekday")
data_weekend <- subset(data, dow == "Weekend")
mean_steps_by_interval_weekday <- aggregate(data_weekday$steps, by = list(data_weekday$interval), mean, na.rm = T)
mean_steps_by_interval_weekend <- aggregate(data_weekend$steps, by = list(data_weekend$interval), mean, na.rm = T)
colnames(mean_steps_by_interval_weekday) <- c("interval","steps")
colnames(mean_steps_by_interval_weekend) <- c("interval","steps")
par(mfrow=c(1,2))
plot(mean_steps_by_interval_weekday$interval,mean_steps_by_interval_weekday$steps, type="l", xlab= "Time Interval", ylab= "Average Number of Steps Taken")
plot(mean_steps_by_interval_weekend$interval,mean_steps_by_interval_weekend$steps, type="l", xlab= "Time Interval", ylab= "Average Number of Steps Taken")
data_weekday <- subset(data, dow == "Weekday")
data_weekend <- subset(data, dow == "Weekend")
mean_steps_by_interval_weekday <- aggregate(data_weekday$steps, by = list(data_weekday$interval), mean, na.rm = T)
mean_steps_by_interval_weekend <- aggregate(data_weekend$steps, by = list(data_weekend$interval), mean, na.rm = T)
colnames(mean_steps_by_interval_weekday) <- c("interval","steps")
colnames(mean_steps_by_interval_weekend) <- c("interval","steps")
par(mfrow=c(2,1))
plot(mean_steps_by_interval_weekday$interval,mean_steps_by_interval_weekday$steps, type="l", xlab= "Time Interval", ylab= "Average Number of Steps Taken")
plot(mean_steps_by_interval_weekend$interval,mean_steps_by_interval_weekend$steps, type="l", xlab= "Time Interval", ylab= "Average Number of Steps Taken")
data_weekday <- subset(data, dow == "Weekday")
data_weekend <- subset(data, dow == "Weekend")
mean_steps_by_interval_weekday <- aggregate(data_weekday$steps, by = list(data_weekday$interval), mean, na.rm = T)
mean_steps_by_interval_weekend <- aggregate(data_weekend$steps, by = list(data_weekend$interval), mean, na.rm = T)
colnames(mean_steps_by_interval_weekday) <- c("interval","steps")
colnames(mean_steps_by_interval_weekend) <- c("interval","steps")
par(mfrow=c(1,1))
plot(mean_steps_by_interval_weekday$interval,mean_steps_by_interval_weekday$steps, type="l", xlab= "Time Interval", ylab= "Average Number of Steps Taken")
plot(mean_steps_by_interval_weekend$interval,mean_steps_by_interval_weekend$steps, type="l", xlab= "Time Interval", ylab= "Average Number of Steps Taken")
data_weekday <- subset(data, dow == "Weekday")
data_weekend <- subset(data, dow == "Weekend")
mean_steps_by_interval_weekday <- aggregate(data_weekday$steps, by = list(data_weekday$interval), mean, na.rm = T)
mean_steps_by_interval_weekend <- aggregate(data_weekend$steps, by = list(data_weekend$interval), mean, na.rm = T)
colnames(mean_steps_by_interval_weekday) <- c("interval","steps")
colnames(mean_steps_by_interval_weekend) <- c("interval","steps")
par(mfrow=c(1,2))
plot(mean_steps_by_interval_weekday$interval,mean_steps_by_interval_weekday$steps, type="l", xlab= "Time Interval", ylab= "Average Number of Steps Taken")
plot(mean_steps_by_interval_weekend$interval,mean_steps_by_interval_weekend$steps, type="l", xlab= "Time Interval", ylab= "Average Number of Steps Taken")
data_weekday <- subset(data, dow == "Weekday")
data_weekend <- subset(data, dow == "Weekend")
mean_steps_by_interval_weekday <- aggregate(data_weekday$steps, by = list(data_weekday$interval), mean, na.rm = T)
mean_steps_by_interval_weekend <- aggregate(data_weekend$steps, by = list(data_weekend$interval), mean, na.rm = T)
colnames(mean_steps_by_interval_weekday) <- c("interval","steps")
colnames(mean_steps_by_interval_weekend) <- c("interval","steps")
par(mfrow=c(1,2))
plot(mean_steps_by_interval_weekday$interval,mean_steps_by_interval_weekday$steps, type="l", xlab= "Time Interval", ylab= "Average Number of Steps Taken")
plot(mean_steps_by_interval_weekend$interval,mean_steps_by_interval_weekend$steps, type="l", xlab= "Time Interval", ylab= NA)
data_weekday <- subset(data, dow == "Weekday")
data_weekend <- subset(data, dow == "Weekend")
mean_steps_by_interval_weekday <- aggregate(data_weekday$steps, by = list(data_weekday$interval), mean, na.rm = T)
mean_steps_by_interval_weekend <- aggregate(data_weekend$steps, by = list(data_weekend$interval), mean, na.rm = T)
colnames(mean_steps_by_interval_weekday) <- c("interval","steps")
colnames(mean_steps_by_interval_weekend) <- c("interval","steps")
par(mfrow=c(1,2))
plot(mean_steps_by_interval_weekday$interval,mean_steps_by_interval_weekday$steps, type="l", xlab= "Time Interval", ylab= "Average Number of Steps Taken", main = "Weekdays")
plot(mean_steps_by_interval_weekend$interval,mean_steps_by_interval_weekend$steps, type="l", xlab= "Time Interval", ylab= NA, main = "Weekends")
library("lattice", lib.loc="~/R/win-library/3.1")
xyplot(interval~steps | factor(dow), data=data)
xyplot(steps~interval | factor(dow), data=data)
xyplot(steps~interval | factor(dow), data=data, xlab = "Interval", ylab = "Number of steps")
xyplot(steps~interval | factor(dow), data=data, xlab = "Interval", ylab = "Number of steps",layout=c(1,2))
xyplot(steps~interval | factor(dow), type="l" data=data, xlab = "Interval", ylab = "Number of steps",layout=c(1,2))
xyplot(steps~interval | factor(dow), type="l", data=data, xlab = "Interval", ylab = "Number of steps",layout=c(1,2))
mean_steps_by_interval_dow <- aggregate(data$steps, by = list(data$interval,data$dow), mean, na.rm = T)
View(mean_steps_by_interval_dow)
mean_steps_by_interval_dow <- aggregate(data$steps, by = list(data$interval,data$dow), mean, na.rm = T)
colnames(mean_steps_by_interval_dow) <- c("interval","dow","steps")
xyplot(steps~interval | factor(dow), data=mean_steps_by_interval_dow, xlab = "Interval", ylab = "Number of steps",layout=c(1,2))
mean_steps_by_interval_dow <- aggregate(data$steps, by = list(data$interval,data$dow), mean, na.rm = T)
colnames(mean_steps_by_interval_dow) <- c("interval","dow","steps")
xyplot(steps~interval | factor(dow), data=mean_steps_by_interval_dow,type = "l", xlab = "Interval", ylab = "Number of steps",layout=c(1,2))
data <- read.csv("activity.csv")
data$date <- as.Date(data$date)
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",temp)
data <- read.csv(unz(temp, "activity.csv"))
unlink(temp)
data$date <- as.Date(data$date)
# Chunk 1: load packages
library(ggplot2)
# Chunk 2: load data
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",temp)
data <- read.csv(unz(temp, "activity.csv"))
unlink(temp)
data$date <- as.Date(data$date)
# Chunk 3: aggregate steps by day
steps_by_day <- aggregate(data$steps, by = list(data$date), sum)
colnames(steps_by_day) <- c("date","steps")
# Chunk 4: histogram of steps by day
m <- ggplot(data=steps_by_day, aes(x=steps))
m + geom_histogram(binwidth = 1000) + xlab("Steps") + ylab("Frequency")
# Chunk 5: mean and median steps by day
mean_steps_by_day <- mean(steps_by_day$x, na.rm = T)
median_steps_by_day <- median(steps_by_day$x, na.rm = T)
# Chunk 6: time series plot of average steps taken by interval
mean_steps_by_interval <- aggregate(data$steps, by = list(data$interval), mean, na.rm = T)
colnames(mean_steps_by_interval) <- c("interval","steps")
plot(mean_steps_by_interval$interval,mean_steps_by_interval$steps, type="l", xlab= "Time Interval", ylab= "Average Number of Steps Taken")
# Chunk 7: average steps by interval
mean_steps_by_interval <- mean_steps_by_interval[order(-mean_steps_by_interval$steps), ]
top_interval <- mean_steps_by_interval$interval[1]
# Chunk 8: identify missing values
missing_values <- sum(is.na(data$steps))
# Chunk 9: clean data set and add average steps for interval
data_cleaned <- merge(data,mean_steps_by_interval,by.x = c("interval"),by.y = c("interval"),all.x = T)
data_cleaned$steps <- ifelse(!is.na(data_cleaned$steps.x),data_cleaned$steps.x,data_cleaned$steps.y)
# Chunk 10: steps by day with cleaned data
steps_by_day_cleaned <- aggregate(data_cleaned$steps, by = list(data_cleaned$date), sum)
colnames(steps_by_day_cleaned) <- c("date","steps")
# Chunk 11: mean and median steps by day
mean_steps_by_day_cleaned <- mean(steps_by_day_cleaned$steps, na.rm = T)
median_steps_by_day_cleaned <- median(steps_by_day_cleaned$steps, na.rm = T)
mean_steps_differential <- mean_steps_by_day - mean_steps_by_day_cleaned
median_steps_differential <- median_steps_by_day - median_steps_by_day_cleaned
# Chunk 12
data$dow <- ifelse(weekdays(data$date) == "Saturday" | weekdays(data$date) == "Sunday", "Weekend", "Weekday")
# Chunk 13
mean_steps_by_interval_dow <- aggregate(data$steps, by = list(data$interval,data$dow), mean, na.rm = T)
colnames(mean_steps_by_interval_dow) <- c("interval","dow","steps")
xyplot(steps~interval | factor(dow), data=mean_steps_by_interval_dow,type = "l", xlab = "Interval", ylab = "Number of steps",layout=c(1,2))
mean_steps_by_day <- mean(steps_by_day$steps, na.rm = T)
median_steps_by_day <- median(steps_by_day$steps, na.rm = T)
mean_steps_by_day_cleaned <- mean(steps_by_day_cleaned$steps, na.rm = T)
median_steps_by_day_cleaned <- median(steps_by_day_cleaned$steps, na.rm = T)
mean_steps_differential <- mean_steps_by_day - mean_steps_by_day_cleaned
median_steps_differential <- median_steps_by_day - median_steps_by_day_cleaned
View(data_cleaned)
View(steps_by_day_cleaned)
steps_by_day_cleaned <- aggregate(data_cleaned$steps + data_cleaned$steps.x, by = list(data_cleaned$date), sum)
colnames(steps_by_day_cleaned) <- c("date","steps")
View(steps_by_day_cleaned)
steps_by_day_cleaned <- aggregate(data_cleaned$steps + data_cleaned$steps.x, by = list(data_cleaned$date), sum)
steps_by_day_cleaned <- aggregate(data_cleaned$steps, by = list(data_cleaned$date), sum)
colnames(steps_by_day_cleaned) <- c("date","steps")
View(steps_by_day_cleaned)
sum(data$steps)
sum(data$steps, na.rm = T)
sum(data_cleaned$steps)
m <- ggplot(data=steps_by_day_cleaned, aes(x=steps))
m + geom_histogram(binwidth = 1000) + xlab("Steps") + ylab("Frequency")
m <- ggplot(data=steps_by_day_cleaned, aes(x=steps))
m + geom_histogram(binwidth = 1000) + xlab("Steps") + ylab("Frequency")
